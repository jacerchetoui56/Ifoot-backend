// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PermissionScope {
  id          String       @id @default(uuid())
  name        String
  description String
  code        String       @unique
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id          String   @id @default(uuid())
  name        String
  roles       Role[]
  description String
  code        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  PermissionScope   PermissionScope? @relation(fields: [permissionScopeId], references: [id])
  permissionScopeId String?
}

enum ProtectionEnum {
  NORMAL
  PROTECTED
}

model Role {
  id           String         @id @default(uuid())
  name         String
  protection   ProtectionEnum @default(NORMAL)
  permisstions Permission[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  User         User[]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teams     Team[]
  profile   Profile?
}

enum ProfileType {
  ADMIN
  TRAINER
  USER
}

model Profile {
  id               String            @id @default(uuid())
  type             ProfileType
  firstName        String
  lastName         String
  phone            String?
  address          String?
  city             String?
  birthdate        DateTime?
  user             User              @relation(fields: [userId], references: [id])
  userId           String            @unique
  team             Team              @relation(fields: [teamId], references: [id])
  teamId           String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  trainingSessions TrainingSession[]
}

model Team {
  id             String          @id @default(uuid())
  name           String
  description    String
  createdBy      User            @relation(fields: [createById], references: [id])
  createById     String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  categories     Category[]
  categoryGroups CategoryGroup[]
  profiles       Profile[]
}

model Category {
  id            String          @id @default(uuid())
  name          String
  teamId        String
  team          Team            @relation(fields: [teamId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  categoryGroup CategoryGroup[]
}

model CategoryGroup {
  id               String            @id @default(uuid())
  name             String
  categoryId       String
  category         Category          @relation(fields: [categoryId], references: [id])
  team             Team              @relation(fields: [teamId], references: [id])
  teamId           String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  trainingSessions TrainingSession[]
}

enum PresenceStatus {
  PRESENT
  ABSENT
  ABSENT_WITH_EXCUSE
  LATE
}

model Presence {
  id                String          @id @default(uuid())
  status            PresenceStatus
  date              DateTime
  TrainingSession   TrainingSession @relation(fields: [trainingSessionId], references: [id])
  trainingSessionId String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model TrainingSession {
  id              String        @id @default(uuid())
  date            DateTime
  trainer         Profile       @relation(fields: [trainerId], references: [id])
  trainerId       String
  categoryGroup   CategoryGroup @relation(fields: [categoryGroupId], references: [id])
  categoryGroupId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  presences       Presence[]
}
